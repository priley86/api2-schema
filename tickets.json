{
  "apiVersion": "2",
  "swaggerVersion": "1.2",
  "basePath": "/",
  "resourcePath": "/Tickets",
  "produces": ["application/json"],
  "apis": [
    {
      "path": "/api/v2/tickets/email-verification",
      "operations": [
        {
          "method": "post",
          "summary": "Create an email verification ticket",
          "notes": "Create a <a href=\"https://auth0.com/docs/email/custom#verification-email\">ticket to verify a user's email address</a>.",
          "type": "post_email-verification_response",
          "nickname": "post_email-verification",
          "parameters": [
            {
              "paramType": "body",
              "name": "body",
              "type": "post_email-verification_body",
              "required": true
            }
          ],
          "responseMessages": [
            { "code": 201, "message": "Ticket successfully created." },
            {
              "code": 400,
              "message": "Invalid request body. The message will vary depending on the cause.",
              "errorCode": "invalid_body"
            },
            {
              "code": 400,
              "message": "The user does not have an email address.",
              "errorCode": "user_missing_email"
            },
            {
              "code": 400,
              "message": "The user's main connection does not support this operation.",
              "errorCode": "operation_not_supported"
            },
            {
              "code": 400,
              "message": "An error ocurred in Auth0's identity provider.",
              "errorCode": "auth0_idp_error"
            },
            {
              "code": 400,
              "message": "The connection with id {connection_id} does not exist.",
              "errorCode": "inexistent_connection"
            },
            { "code": 401, "message": "Invalid token." },
            { "code": 401, "message": "Client is not global." },
            {
              "code": 401,
              "message": "Invalid signature received for JSON Web Token validation."
            },
            {
              "code": 403,
              "message": "User to be acted on does not match subject in bearer token.",
              "errorCode": "unowned_resource"
            },
            {
              "code": 403,
              "message": "Insufficient scope; expected any of: create:user_tickets.",
              "errorCode": "insufficient_scope"
            },
            {
              "code": 404,
              "message": "User not found.",
              "errorCode": "inexistent_user"
            },
            {
              "code": 429,
              "message": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
            },
            {
              "code": 400,
              "message": "The client does not exist",
              "errorCode": "inexistent_client"
            },
            {
              "code": 400,
              "message": "The organization does not exist",
              "errorCode": "inexistent_organization"
            },
            {
              "code": 400,
              "message": "The user with id {user_id} is not a member of organization with id {organization_id}.",
              "errorCode": "invalid_user"
            }
          ],
          "consumes": ["application/json", "application/x-www-form-urlencoded"],
          "authorizations": { "jwt": { "scopes": ["create:user_tickets"] } }
        }
      ]
    },
    {
      "path": "/api/v2/tickets/password-change",
      "operations": [
        {
          "method": "post",
          "summary": "Create a password change ticket",
          "notes": "Create a <a href=\"https://auth0.com/docs/connections/database/password-change\">password change ticket</a> for a user.",
          "type": "post_password-change_response",
          "nickname": "post_password-change",
          "parameters": [
            {
              "paramType": "body",
              "name": "body",
              "type": "post_password-change_body",
              "required": true
            }
          ],
          "responseMessages": [
            { "code": 201, "message": "Ticket successfully created." },
            {
              "code": 400,
              "message": "Invalid request body. The message will vary depending on the cause.",
              "errorCode": "invalid_body"
            },
            {
              "code": 400,
              "message": "The user does not have an email address.",
              "errorCode": "user_missing_email"
            },
            {
              "code": 400,
              "message": "The user's main connection does not support this operation.",
              "errorCode": "operation_not_supported"
            },
            {
              "code": 400,
              "message": "An error ocurred in Auth0's identity provider.",
              "errorCode": "auth0_idp_error"
            },
            {
              "code": 400,
              "message": "The connection with id {connection_id} does not exist.",
              "errorCode": "inexistent_connection"
            },
            { "code": 401, "message": "Invalid token." },
            { "code": 401, "message": "Client is not global." },
            {
              "code": 401,
              "message": "Invalid signature received for JSON Web Token validation."
            },
            {
              "code": 403,
              "message": "User to be acted on does not match subject in bearer token.",
              "errorCode": "unowned_resource"
            },
            {
              "code": 403,
              "message": "Insufficient scope; expected any of: create:user_tickets.",
              "errorCode": "insufficient_scope"
            },
            {
              "code": 404,
              "message": "User not found.",
              "errorCode": "inexistent_user"
            },
            {
              "code": 429,
              "message": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
            },
            {
              "code": 400,
              "message": "The client does not exist",
              "errorCode": "inexistent_client"
            },
            {
              "code": 400,
              "message": "The organization does not exist",
              "errorCode": "inexistent_organization"
            },
            {
              "code": 400,
              "message": "The user with id {user_id} is not a member of organization with id {organization_id}.",
              "errorCode": "invalid_user"
            }
          ],
          "consumes": ["application/json", "application/x-www-form-urlencoded"],
          "authorizations": { "jwt": { "scopes": ["create:user_tickets"] } }
        }
      ]
    }
  ],
  "consumes": ["application/json", "application/x-www-form-urlencoded"],
  "models": {
    "post_email-verification_response": {
      "type": "object",
      "properties": {
        "ticket": {
          "type": "string",
          "format": "url",
          "defaultValue": "https://login.auth0.com/lo/verify_email?client_id=nsaPS2p3cargoFy82WT7betaOPOt3qSh&tenant=mdocs&bewit=bmNlR01CcDNOUE1GeXVzODJXVDdyY1RUT1BPdDNxU2hcMTQzMDY2MjE4MVxuRTcxM0RSeUNlbEpzUUJmaFVaS3A1NEdJbWFzSUZMYzRTdEFtY2NMMXhZPVx7ImVtYWloojoiZGFtaWtww2NoQGhvdG1haWwuY29tIiwidGVuYW50IjoiZHNjaGVua2tjwWFuIiwiY2xpZW50X2lkIjoibmNlR01CcDNOUE1GeXVzODJXVDdyY1RUT1BPiiqxU2giLCJjb25uZWN0aW9uIjoiRGFtaWmsdiwicmVzdWx0VXJsIjoiIn0",
          "description": "URL representing the ticket."
        }
      },
      "required": ["ticket"]
    },
    "post_email-verification_body": {
      "type": "object",
      "properties": {
        "result_url": {
          "type": "string",
          "format": "url",
          "description": "URL the user will be redirected to in the classic Universal Login experience once the ticket is used.",
          "defaultValue": "http://myapp.com/callback"
        },
        "user_id": {
          "type": "string",
          "description": "user_id of for whom the ticket should be created.",
          "format": "user-id"
        },
        "client_id": {
          "type": "string",
          "format": "client-id",
          "description": "ID of the client. If provided for tenants using New Universal Login experience, the user will be prompted to redirect to the default login route of the corresponding application once the ticket is used. See <a target='' href='https://manage.local.dev.auth0.com/docs/universal-login/configure-default-login-routes#completing-the-password-reset-flow'>Configuring Default Login Routes</a> for more details.",
          "defaultValue": "DaM8bokEXBWrTUFCiJjWn50jei6ardyX"
        },
        "organization_id": {
          "type": "string",
          "format": "organization-id",
          "description": "(Optional) Organization ID â€“ the ID of the Organization. If provided, organization parameters will be made available to the email template and organization branding will be applied to the prompt. In addition, the redirect link in the prompt will include organization_id and organization_name query string parameters.",
          "defaultValue": "org_2eondWoxcMIpaLQc"
        },
        "ttl_sec": {
          "type": "integer",
          "minimum": 0,
          "default": 0,
          "description": "Number of seconds for which the ticket is valid before expiration. If unspecified or set to 0, this value defaults to 432000 seconds (5 days)."
        },
        "includeEmailInRedirect": {
          "type": "boolean",
          "description": "Whether to include the email address as part of the returnUrl in the reset_email (true), or not (false).",
          "x-swagger-docs": true
        },
        "identity": {
          "$ref": "post_email-verification_body_identity",
          "description": "This must be provided to verify primary social, enterprise and passwordless email identities. Also, is needed to verify secondary identities."
        }
      },
      "dependencies": {
        "client_id": { "properties": { "result_url": { "not": {} } } },
        "organization_id": { "properties": { "result_url": { "not": {} } } }
      },
      "additionalProperties": false,
      "required": ["user_id"]
    },
    "post_email-verification_body_identity": {
      "type": "object",
      "description": "This must be provided to verify primary social, enterprise and passwordless email identities. Also, is needed to verify secondary identities.",
      "properties": {
        "user_id": {
          "type": "string",
          "description": "user_id of the identity to be verified.",
          "defaultValue": "5457edea1b8f22891a000004"
        },
        "provider": {
          "type": "string",
          "description": "Identity provider name of the identity (e.g. `google-oauth2`).",
          "enum": [
            "ad",
            "adfs",
            "amazon",
            "apple",
            "dropbox",
            "bitbucket",
            "aol",
            "auth0-oidc",
            "auth0",
            "baidu",
            "bitly",
            "box",
            "custom",
            "daccount",
            "dwolla",
            "email",
            "evernote-sandbox",
            "evernote",
            "exact",
            "facebook",
            "fitbit",
            "flickr",
            "github",
            "google-apps",
            "google-oauth2",
            "instagram",
            "ip",
            "line",
            "linkedin",
            "miicard",
            "oauth1",
            "oauth2",
            "office365",
            "oidc",
            "okta",
            "paypal",
            "paypal-sandbox",
            "pingfederate",
            "planningcenter",
            "renren",
            "salesforce-community",
            "salesforce-sandbox",
            "salesforce",
            "samlp",
            "sharepoint",
            "shopify",
            "sms",
            "soundcloud",
            "thecity-sandbox",
            "thecity",
            "thirtysevensignals",
            "twitter",
            "untappd",
            "vkontakte",
            "waad",
            "weibo",
            "windowslive",
            "wordpress",
            "yahoo",
            "yammer",
            "yandex"
          ],
          "defaultValue": "google-oauth2"
        }
      },
      "required": ["user_id", "provider"],
      "additionalProperties": false
    },
    "post_password-change_response": {
      "type": "object",
      "properties": {
        "ticket": {
          "type": "string",
          "format": "url",
          "defaultValue": "https://login.auth0.com/lo/reset?client_id=nsaPS2p3cargoFy82WT7betaOPOt3qSh&tenant=mdocs&bewit=bmNlR01CcDNOUE1GeXVzODJXVDdyY1RUT1BPdDNxU2hcMTQzMDY2MjE4MVxuRTcxM0RSeUNlbEpzUUJmaFVaS3A1NEdJbWFzSUZMYzRTdEFtY2NMMXhZPVx7ImVtYWloojoiZGFtaWtww2NoQGhvdG1haWwuY29tIiwidGVuYW50IjoiZHNjaGVua2tjwWFuIiwiY2xpZW50X2lkIjoibmNlR01CcDNOUE1GeXVzODJXVDdyY1RUT1BPiiqxU2giLCJjb25uZWN0aW9uIjoiRGFtaWmsdiwicmVzdWx0VXJsIjoiIn0",
          "description": "URL representing the ticket."
        }
      },
      "required": ["ticket"]
    },
    "post_password-change_body": {
      "type": "object",
      "properties": {
        "result_url": {
          "type": "string",
          "format": "url",
          "description": "URL the user will be redirected to in the classic Universal Login experience once the ticket is used.",
          "defaultValue": "http://myapp.com/callback"
        },
        "user_id": {
          "type": "string",
          "description": "user_id of for whom the ticket should be created.",
          "format": "user-id"
        },
        "client_id": {
          "type": "string",
          "format": "client-id",
          "description": "ID of the client. If provided for tenants using New Universal Login experience, the user will be prompted to redirect to the default login route of the corresponding application once the ticket is used. See <a target='' href='https://manage.local.dev.auth0.com/docs/universal-login/configure-default-login-routes#completing-the-password-reset-flow'>Configuring Default Login Routes</a> for more details.",
          "defaultValue": "DaM8bokEXBWrTUFCiJjWn50jei6ardyX"
        },
        "organization_id": {
          "type": "string",
          "format": "organization-id",
          "description": "(Optional) Organization ID â€“ the ID of the Organization. If provided, organization parameters will be made available to the email template and organization branding will be applied to the prompt. In addition, the redirect link in the prompt will include organization_id and organization_name query string parameters.",
          "defaultValue": "org_2eondWoxcMIpaLQc"
        },
        "connection_id": {
          "type": "string",
          "pattern": "^con_[A-Za-z0-9]{16}$",
          "description": "ID of the connection. If provided, allows the user to be specified using email instead of user_id. If you set this value, you must also send the email parameter. You cannot send user_id when specifying a connection_id.",
          "defaultValue": "con_0000000000000001"
        },
        "email": {
          "type": "string",
          "description": "Email address of the user for whom the tickets should be created. Requires the connection_id parameter. Cannot be specified when using user_id.",
          "format": "email"
        },
        "ttl_sec": {
          "type": "integer",
          "minimum": 0,
          "default": 0,
          "description": "Number of seconds for which the ticket is valid before expiration. If unspecified or set to 0, this value defaults to 432000 seconds (5 days)."
        },
        "mark_email_as_verified": {
          "type": "boolean",
          "description": "Whether to set the email_verified attribute to true (true) or whether it should not be updated (false).",
          "defaultValue": false
        },
        "includeEmailInRedirect": {
          "type": "boolean",
          "description": "Whether to include the email address as part of the returnUrl in the reset_email (true), or not (false).",
          "x-swagger-docs": true
        }
      },
      "dependencies": {
        "client_id": { "properties": { "result_url": { "not": {} } } },
        "organization_id": { "properties": { "result_url": { "not": {} } } },
        "email": {
          "required": ["connection_id"],
          "properties": { "user_id": { "not": {} } }
        },
        "connection_id": {
          "required": ["email"],
          "properties": { "user_id": { "not": {} } }
        },
        "user_id": {
          "properties": {
            "connection_id": { "not": {} },
            "email": { "not": {} }
          }
        }
      },
      "additionalProperties": false
    }
  }
}

{
  "apiVersion": "2",
  "swaggerVersion": "1.2",
  "basePath": "/",
  "resourcePath": "/Rules",
  "produces": ["application/json"],
  "apis": [
    {
      "path": "/api/v2/rules",
      "operations": [
        {
          "method": "get",
          "summary": "Get rules",
          "notes": "Retrieve a filtered list of <a href=\"https://auth0.com/docs/rules\">rules</a>. Accepts a list of fields to include or exclude.\n",
          "type": "array",
          "nickname": "get_rules",
          "parameters": [
            {
              "paramType": "query",
              "name": "page",
              "description": "Page index of the results to return. First page is 0.",
              "type": "integer",
              "minimum": 0
            },
            {
              "paramType": "query",
              "name": "per_page",
              "description": "Number of results per page. Paging is disabled if parameter not sent.",
              "type": "integer",
              "minimum": 0,
              "maximum": 100
            },
            {
              "paramType": "query",
              "name": "include_totals",
              "description": "Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).",
              "type": "boolean"
            },
            {
              "paramType": "query",
              "name": "enabled",
              "description": "Optional filter on whether a rule is enabled (true) or disabled (false).",
              "type": "boolean"
            },
            {
              "paramType": "query",
              "name": "fields",
              "description": "Comma-separated list of fields to include or exclude (based on value provided for include_fields) in the result. Leave empty to retrieve all fields.",
              "type": "string"
            },
            {
              "paramType": "query",
              "name": "include_fields",
              "description": "Whether specified fields are to be included (true) or excluded (false).",
              "type": "boolean"
            }
          ],
          "items": { "$ref": "get_rules_response" },
          "responseMessages": [
            { "code": 200, "message": "Rules successfully retrieved." },
            {
              "code": 400,
              "message": "Invalid request query string. The message will vary depending on the cause.",
              "errorCode": "invalid_query_string"
            },
            { "code": 401, "message": "Invalid token." },
            { "code": 401, "message": "Client is not global." },
            {
              "code": 401,
              "message": "Invalid signature received for JSON Web Token validation."
            },
            {
              "code": 403,
              "message": "Insufficient scope; expected any of: read:rules.",
              "errorCode": "insufficient_scope"
            },
            {
              "code": 404,
              "message": "Rule not found.",
              "errorCode": "inexistent_rule"
            },
            {
              "code": 429,
              "message": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
            }
          ],
          "authorizations": { "jwt": { "scopes": ["read:rules"] } }
        },
        {
          "method": "post",
          "summary": "Create a rule",
          "notes": "Create a <a href=\"https://auth0.com/docs/rules#create-a-new-rule-using-the-management-api\">new rule</a>.\n\nNote: Changing a rule's stage of execution from the default <code>login_success</code> can change the rule's function signature to have user omitted.\n",
          "type": "post_rules_response",
          "nickname": "post_rules",
          "parameters": [
            {
              "paramType": "body",
              "name": "body",
              "type": "post_rules_body",
              "required": true
            }
          ],
          "responseMessages": [
            { "code": 201, "message": "Rule successfully created." },
            {
              "code": 400,
              "message": "Invalid request body. The message will vary depending on the cause.",
              "errorCode": "invalid_body"
            },
            { "code": 401, "message": "Invalid token." },
            { "code": 401, "message": "Client is not global." },
            {
              "code": 401,
              "message": "Invalid signature received for JSON Web Token validation."
            },
            {
              "code": 403,
              "message": "Insufficient scope; expected any of: read:rules.",
              "errorCode": "insufficient_scope"
            },
            {
              "code": 403,
              "message": "You reached the limit of entities of this type for this tenant.",
              "errorCode": "too_many_entities"
            },
            {
              "code": 409,
              "message": "A rule with the same name already exists.",
              "errorCode": "rule_conflict"
            },
            {
              "code": 409,
              "message": "A rule with the same order already exists.",
              "errorCode": "rule_conflict"
            },
            {
              "code": 409,
              "message": "A rule with the same execution stage already exists.",
              "errorCode": "rule_conflict"
            },
            {
              "code": 429,
              "message": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
            }
          ],
          "consumes": ["application/json", "application/x-www-form-urlencoded"],
          "authorizations": { "jwt": { "scopes": ["create:rules"] } }
        }
      ]
    },
    {
      "path": "/api/v2/rules/{id}",
      "operations": [
        {
          "method": "get",
          "summary": "Get a rule",
          "notes": "Retrieve <a href=\"https://auth0.com/docs/rules\">rule</a> details. Accepts a list of fields to include or exclude in the result.\n",
          "type": "get_rules_by_id_response",
          "nickname": "get_rules_by_id",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "description": "ID of the rule to retrieve.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "query",
              "name": "fields",
              "description": "Comma-separated list of fields to include or exclude (based on value provided for include_fields) in the result. Leave empty to retrieve all fields.",
              "type": "string"
            },
            {
              "paramType": "query",
              "name": "include_fields",
              "description": "Whether specified fields are to be included (true) or excluded (false).",
              "type": "boolean"
            }
          ],
          "responseMessages": [
            { "code": 200, "message": "Rule successfully retrieved." },
            {
              "code": 400,
              "message": "Invalid request URI. The message will vary depending on the cause.",
              "errorCode": "invalid_uri"
            },
            {
              "code": 400,
              "message": "Invalid request query string. The message will vary depending on the cause.",
              "errorCode": "invalid_query_string"
            },
            { "code": 401, "message": "Invalid token." },
            { "code": 401, "message": "Client is not global." },
            {
              "code": 401,
              "message": "Invalid signature received for JSON Web Token validation."
            },
            {
              "code": 403,
              "message": "Insufficient scope; expected any of: read:rules.",
              "errorCode": "insufficient_scope"
            },
            {
              "code": 404,
              "message": "Rule not found.",
              "errorCode": "inexistent_rule"
            },
            {
              "code": 429,
              "message": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
            }
          ],
          "authorizations": { "jwt": { "scopes": ["read:rules"] } }
        },
        {
          "method": "delete",
          "summary": "Delete a rule",
          "notes": "Delete a rule.\n",
          "type": "void",
          "nickname": "delete_rules_by_id",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "description": "ID of the rule to delete.",
              "type": "string",
              "required": true
            }
          ],
          "responseMessages": [
            { "code": 204, "message": "Rule successfully deleted." },
            {
              "code": 400,
              "message": "Invalid request URI. The message will vary depending on the cause.",
              "errorCode": "invalid_uri"
            },
            { "code": 401, "message": "Invalid token." },
            { "code": 401, "message": "Client is not global." },
            {
              "code": 401,
              "message": "Invalid signature received for JSON Web Token validation."
            },
            {
              "code": 403,
              "message": "Insufficient scope; expected any of: delete:rules.",
              "errorCode": "insufficient_scope"
            },
            {
              "code": 429,
              "message": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
            }
          ],
          "authorizations": { "jwt": { "scopes": ["delete:rules"] } }
        },
        {
          "method": "patch",
          "summary": "Update a rule",
          "notes": "Update an existing rule.\n",
          "type": "patch_rules_by_id_response",
          "nickname": "patch_rules_by_id",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "description": "ID of the rule to retrieve.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "body",
              "name": "body",
              "type": "patch_rules_by_id_body",
              "required": true
            }
          ],
          "responseMessages": [
            { "code": 200, "message": "Rule successfully updated." },
            {
              "code": 400,
              "message": "Invalid request URI. The message will vary depending on the cause.",
              "errorCode": "invalid_uri"
            },
            {
              "code": 400,
              "message": "Invalid request body. The message will vary depending on the cause.",
              "errorCode": "invalid_body"
            },
            { "code": 401, "message": "Invalid token." },
            { "code": 401, "message": "Client is not global." },
            {
              "code": 401,
              "message": "Invalid signature received for JSON Web Token validation."
            },
            {
              "code": 403,
              "message": "Insufficient scope; expected any of: update:rules.",
              "errorCode": "insufficient_scope"
            },
            {
              "code": 404,
              "message": "Rule not found.",
              "errorCode": "rule_conflict"
            },
            {
              "code": 409,
              "message": "A rule with the same name already exists.",
              "errorCode": "rule_conflict"
            },
            {
              "code": 429,
              "message": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
            }
          ],
          "consumes": ["application/json", "application/x-www-form-urlencoded"],
          "authorizations": { "jwt": { "scopes": ["update:rules"] } }
        }
      ]
    }
  ],
  "consumes": ["application/json", "application/x-www-form-urlencoded"],
  "models": {
    "get_rules_response": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of this rule.",
          "defaultValue": "rule_1"
        },
        "id": {
          "type": "string",
          "description": "ID of this rule.",
          "defaultValue": "con_0000000000000001"
        },
        "enabled": {
          "type": "boolean",
          "description": "Whether the rule is enabled (true), or disabled (false).",
          "defaultValue": true
        },
        "script": {
          "type": "string",
          "description": "Code to be executed when this rule runs.",
          "defaultValue": "function (user, context, callback) {\n  callback(null, user, context);\n}"
        },
        "order": {
          "type": "number",
          "description": "Order that this rule should execute in relative to other rules. Lower-valued rules execute first.",
          "defaultValue": 1
        },
        "stage": {
          "type": "string",
          "description": "Execution stage of this rule. Can be `login_success`, `login_failure`, or `pre_authorize`.",
          "defaultValue": "login_success"
        }
      },
      "additionalProperties": false
    },
    "post_rules_response": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of this rule.",
          "defaultValue": "rule_1"
        },
        "id": {
          "type": "string",
          "description": "ID of this rule.",
          "defaultValue": "con_0000000000000001"
        },
        "enabled": {
          "type": "boolean",
          "description": "Whether the rule is enabled (true), or disabled (false).",
          "defaultValue": true
        },
        "script": {
          "type": "string",
          "description": "Code to be executed when this rule runs.",
          "defaultValue": "function (user, context, callback) {\n  callback(null, user, context);\n}"
        },
        "order": {
          "type": "number",
          "description": "Order that this rule should execute in relative to other rules. Lower-valued rules execute first.",
          "defaultValue": 1
        },
        "stage": {
          "type": "string",
          "description": "Execution stage of this rule. Can be `login_success`, `login_failure`, or `pre_authorize`.",
          "defaultValue": "login_success"
        }
      },
      "additionalProperties": false
    },
    "post_rules_body": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of this rule.",
          "pattern": "^[a-zA-Z0-9]([ \\-a-zA-Z0-9]*[a-zA-Z0-9])?$",
          "defaultValue": "my-rule"
        },
        "script": {
          "type": "string",
          "description": "Code to be executed when this rule runs.",
          "minLength": 1,
          "defaultValue": "function (user, context, callback) {\n  callback(null, user, context);\n}"
        },
        "order": {
          "type": "number",
          "description": "Order that this rule should execute in relative to other rules. Lower-valued rules execute first.",
          "minimum": 0,
          "defaultValue": 2
        },
        "enabled": {
          "type": "boolean",
          "description": "Whether the rule is enabled (true), or disabled (false).",
          "default": true,
          "defaultValue": true
        }
      },
      "required": ["name", "script"],
      "additionalProperties": false
    },
    "get_rules_by_id_response": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of this rule.",
          "defaultValue": "rule_1"
        },
        "id": {
          "type": "string",
          "description": "ID of this rule.",
          "defaultValue": "con_0000000000000001"
        },
        "enabled": {
          "type": "boolean",
          "description": "Whether the rule is enabled (true), or disabled (false).",
          "defaultValue": true
        },
        "script": {
          "type": "string",
          "description": "Code to be executed when this rule runs.",
          "defaultValue": "function (user, context, callback) {\n  callback(null, user, context);\n}"
        },
        "order": {
          "type": "number",
          "description": "Order that this rule should execute in relative to other rules. Lower-valued rules execute first.",
          "defaultValue": 1
        },
        "stage": {
          "type": "string",
          "description": "Execution stage of this rule. Can be `login_success`, `login_failure`, or `pre_authorize`.",
          "defaultValue": "login_success"
        }
      },
      "additionalProperties": false
    },
    "patch_rules_by_id_response": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of this rule.",
          "defaultValue": "rule_1"
        },
        "id": {
          "type": "string",
          "description": "ID of this rule.",
          "defaultValue": "con_0000000000000001"
        },
        "enabled": {
          "type": "boolean",
          "description": "Whether the rule is enabled (true), or disabled (false).",
          "defaultValue": true
        },
        "script": {
          "type": "string",
          "description": "Code to be executed when this rule runs.",
          "defaultValue": "function (user, context, callback) {\n  callback(null, user, context);\n}"
        },
        "order": {
          "type": "number",
          "description": "Order that this rule should execute in relative to other rules. Lower-valued rules execute first.",
          "defaultValue": 1
        },
        "stage": {
          "type": "string",
          "description": "Execution stage of this rule. Can be `login_success`, `login_failure`, or `pre_authorize`.",
          "defaultValue": "login_success"
        }
      },
      "additionalProperties": false
    },
    "patch_rules_by_id_body": {
      "type": "object",
      "properties": {
        "script": {
          "type": "string",
          "description": "Code to be executed when this rule runs.",
          "minLength": 1,
          "defaultValue": "function (user, context, callback) {\n  callback(null, user, context);\n}"
        },
        "name": {
          "type": "string",
          "description": "Name of this rule.",
          "pattern": "^[a-zA-Z0-9]([ \\-a-zA-Z0-9]*[a-zA-Z0-9])?$",
          "defaultValue": "my-rule"
        },
        "order": {
          "type": "number",
          "description": "Order that this rule should execute in relative to other rules. Lower-valued rules execute first.",
          "minimum": 0,
          "defaultValue": 2
        },
        "enabled": {
          "type": "boolean",
          "description": "Whether the rule is enabled (true), or disabled (false).",
          "defaultValue": true
        }
      },
      "minProperties": 1,
      "additionalProperties": false
    }
  }
}

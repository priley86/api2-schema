{
  "apiVersion": "2",
  "swaggerVersion": "1.2",
  "basePath": "/",
  "resourcePath": "/Resource Servers",
  "produces": ["application/json"],
  "apis": [
    {
      "path": "/api/v2/resource-servers",
      "operations": [
        {
          "method": "get",
          "summary": "Get resource servers",
          "notes": "Retrieve <a href=\"https://auth0.com/docs/apis\">APIs</a> (also known as resource servers) that you can consume from your authorized applications. ",
          "type": "array",
          "nickname": "get_resource-servers",
          "parameters": [
            {
              "paramType": "query",
              "name": "page",
              "description": "Page index of the results to return. First page is 0.",
              "type": "integer",
              "minimum": 0
            },
            {
              "paramType": "query",
              "name": "per_page",
              "description": "Number of results per page. Paging is disabled if parameter not sent.",
              "type": "integer",
              "minimum": 1,
              "maximum": 100
            },
            {
              "paramType": "query",
              "name": "include_totals",
              "description": "Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).",
              "type": "boolean"
            },
            {
              "paramType": "query",
              "name": "include_fields",
              "description": "Whether specified fields are to be included (true) or excluded (false).",
              "type": "boolean"
            }
          ],
          "items": { "$ref": "get_resource-servers_response" },
          "responseMessages": [
            {
              "code": 200,
              "message": "Resource servers successfully retrieved."
            },
            {
              "code": 400,
              "message": "Invalid request query string. The message will vary depending on the cause.",
              "errorCode": "invalid_query_string"
            },
            { "code": 401, "message": "Invalid token." },
            { "code": 401, "message": "Client is not global." },
            {
              "code": 401,
              "message": "Invalid signature received for JSON Web Token validation."
            },
            {
              "code": 403,
              "message": "Insufficient scope, expected any of: read:resource_servers.",
              "errorCode": "insufficient_scope"
            },
            {
              "code": 429,
              "message": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
            }
          ],
          "authorizations": { "jwt": { "scopes": ["read:resource_servers"] } }
        },
        {
          "method": "post",
          "summary": "Create a resource server",
          "notes": "Create a new API (also known as a resource server).",
          "type": "void",
          "nickname": "post_resource-servers",
          "parameters": [
            {
              "paramType": "body",
              "name": "body",
              "type": "post_resource-servers_body",
              "required": true
            }
          ],
          "responseMessages": [
            { "code": 201, "message": "Resource server successfully created." },
            {
              "code": 400,
              "message": "Invalid request body. The message will vary depending on the cause.",
              "errorCode": "invalid_body"
            },
            {
              "code": 400,
              "message": "The selected identifier is reserved.",
              "errorCode": "reserved_identifier"
            },
            { "code": 401, "message": "Invalid token." },
            { "code": 401, "message": "Client is not global." },
            {
              "code": 401,
              "message": "Invalid signature received for JSON Web Token validation."
            },
            {
              "code": 403,
              "message": "Insufficient scope; expected any of: create:resource_servers.",
              "errorCode": "insufficient_scope"
            },
            {
              "code": 403,
              "message": "You reached the limit of entities of this type for this tenant.",
              "errorCode": "too_many_entities"
            },
            {
              "code": 409,
              "message": "A resource server with the same identifier already exists.",
              "errorCode": "resource_server_conflict"
            },
            {
              "code": 429,
              "message": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
            }
          ],
          "consumes": ["application/json", "application/x-www-form-urlencoded"],
          "authorizations": { "jwt": { "scopes": ["create:resource_servers"] } }
        }
      ]
    },
    {
      "path": "/api/v2/resource-servers/{id}",
      "operations": [
        {
          "method": "get",
          "summary": "Get a resource server",
          "notes": "Retrieve an <a href=\"https://auth0.com/docs/apis\">API</a> (also known as resource server).",
          "type": "get_resource-servers_by_id_response",
          "nickname": "get_resource-servers_by_id",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "description": "ID or audience of the resource server to retrieve.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "query",
              "name": "include_fields",
              "description": "Whether specified fields are to be included (true) or excluded (false).",
              "type": "boolean"
            }
          ],
          "responseMessages": [
            {
              "code": 200,
              "message": "Resource server successfully retrieved."
            },
            {
              "code": 400,
              "message": "Invalid request URI. The message will vary depending on the cause.",
              "errorCode": "invalid_uri"
            },
            {
              "code": 400,
              "message": "Invalid request query string. The message will vary depending on the cause.",
              "errorCode": "invalid_query_string"
            },
            { "code": 401, "message": "Invalid token." },
            { "code": 401, "message": "Client is not global." },
            {
              "code": 401,
              "message": "Invalid signature received for JSON Web Token validation."
            },
            {
              "code": 403,
              "message": "Insufficient scope; expected any of: read:resource_servers.",
              "errorCode": "insufficient_scope"
            },
            {
              "code": 403,
              "message": "Some fields cannot be read with the permissions granted by the bearer token scopes. The message will vary depending on the fields and the scopes.",
              "errorCode": "insufficient_scope"
            },
            {
              "code": 404,
              "message": "Resource server not found.",
              "errorCode": "inexistent_resource_server"
            },
            {
              "code": 429,
              "message": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
            }
          ],
          "authorizations": { "jwt": { "scopes": ["read:resource_servers"] } }
        },
        {
          "method": "delete",
          "summary": "Delete a resource server",
          "notes": "Delete an existing API (also known as a resource server).",
          "type": "void",
          "nickname": "delete_resource-servers_by_id",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "description": "ID or the audience of the resource server to delete.",
              "type": "string",
              "required": true
            }
          ],
          "responseMessages": [
            { "code": 204, "message": "Resource server successfully deleted." },
            {
              "code": 400,
              "message": "Invalid request URI. The message will vary depending on the cause.",
              "errorCode": "invalid_uri"
            },
            {
              "code": 400,
              "errorCode": "delete_system_resource_server",
              "message": "System resource servers cannot be deleted."
            },
            { "code": 401, "message": "Invalid token." },
            { "code": 401, "message": "Client is not global." },
            {
              "code": 401,
              "message": "Invalid signature received for JSON Web Token validation."
            },
            {
              "code": 403,
              "message": "Insufficient scope; expected any of: delete:resource_servers.",
              "errorCode": "insufficient_scope"
            },
            {
              "code": 429,
              "message": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
            }
          ],
          "authorizations": { "jwt": { "scopes": ["delete:resource_servers"] } }
        },
        {
          "method": "patch",
          "summary": "Update a resource server",
          "notes": "Update an existing API (also known as a resource server).",
          "type": "void",
          "nickname": "patch_resource-servers_by_id",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "description": "ID or audience of the resource server to update.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "body",
              "name": "body",
              "type": "patch_resource-servers_by_id_body",
              "required": true
            }
          ],
          "responseMessages": [
            { "code": 201, "message": "Resource server successfully updated." },
            {
              "code": 400,
              "message": "Invalid request body. The message will vary depending on the cause.",
              "errorCode": "invalid_body"
            },
            {
              "code": 400,
              "message": "System resource servers cannot be patched."
            },
            { "code": 401, "message": "Invalid token." },
            { "code": 401, "message": "Client is not global." },
            {
              "code": 401,
              "message": "Invalid signature received for JSON Web Token validation."
            },
            {
              "code": 403,
              "message": "Insufficient scope; expected any of: update:resource_servers.",
              "errorCode": "insufficient_scope"
            },
            {
              "code": 409,
              "message": "A resource server with the same identifier already exists.",
              "errorCode": "connection_conflict"
            },
            {
              "code": 429,
              "message": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
            }
          ],
          "consumes": ["application/json", "application/x-www-form-urlencoded"],
          "authorizations": { "jwt": { "scopes": ["update:resource_servers"] } }
        }
      ]
    }
  ],
  "consumes": ["application/json", "application/x-www-form-urlencoded"],
  "models": {
    "get_resource-servers_response": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "ID of the API (resource server)."
        },
        "name": {
          "type": "string",
          "description": "Friendly name for this resource server. Can not contain `<` or `>` characters."
        },
        "is_system": {
          "type": "boolean",
          "description": "Whether this is an Auth0 system API (true) or a custom API (false)."
        },
        "identifier": {
          "type": "string",
          "description": "Unique identifier for the API used as the audience parameter on authorization calls. Can not be changed once set."
        },
        "scopes": {
          "type": "array",
          "description": "List of permissions (scopes) that this API uses.",
          "items": {
            "type": "object",
            "properties": {
              "value": {
                "type": "string",
                "description": "Value of this scope.",
                "minLength": 1,
                "maxLength": 280
              },
              "description": {
                "type": "string",
                "description": "User-friendly description of this scope.",
                "maxLength": 500
              }
            },
            "required": ["value"],
            "additionalProperties": false
          }
        },
        "signing_alg": {
          "type": "string",
          "description": "Algorithm used to sign JWTs. Can be `HS256` or `RS256`.",
          "enum": ["HS256", "RS256"]
        },
        "signing_secret": {
          "type": "string",
          "minLength": 16,
          "description": "Secret used to sign tokens when using symmetric algorithms (HS256).",
          "secret": true
        },
        "allow_offline_access": {
          "type": "boolean",
          "description": "Whether refresh tokens can be issued for this API (true) or not (false)."
        },
        "skip_consent_for_verifiable_first_party_clients": {
          "type": "boolean",
          "description": "Whether to skip user consent for applications flagged as first party (true) or not (false)."
        },
        "token_lifetime": {
          "type": "integer",
          "description": "Expiration value (in seconds) for access tokens issued for this API from the token endpoint."
        },
        "token_lifetime_for_web": {
          "type": "integer",
          "description": "Expiration value (in seconds) for access tokens issued for this API via Implicit or Hybrid Flows. Cannot be greater than the `token_lifetime` value."
        },
        "enforce_policies": {
          "type": "boolean",
          "description": "Whether authorization polices are enforced (true) or unenforced (false)."
        },
        "token_dialect": {
          "type": "string",
          "description": "Dialect of access tokens that should be issued. Can be `access_token` or `access_token_authz` (includes permissions).",
          "enum": ["access_token", "access_token_authz"]
        },
        "client": { "$ref": "get_resource-servers_response_client" }
      },
      "additionalProperties": false
    },
    "get_resource-servers_response_claims_mapping": {
      "type": "object",
      "description": "Custom configuration for claims in access tokens",
      "properties": { "sub": { "$ref": "get_resource-servers_response_sub" } },
      "additionalProperties": false
    },
    "get_resource-servers_response_sub": {
      "properties": { "source": { "enum": ["default"] } },
      "required": ["source"]
    },
    "get_resource-servers_response_client": {
      "type": "object",
      "properties": {},
      "additionalProperties": false
    },
    "post_resource-servers_body": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "pattern": "^[^<>]+$",
          "maxLength": 200,
          "description": "Friendly name for this resource server. Can not contain `<` or `>` characters."
        },
        "identifier": {
          "type": "string",
          "description": "Unique identifier for the API used as the audience parameter on authorization calls. Can not be changed once set.",
          "maxLength": 600,
          "minLength": 1
        },
        "scopes": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "value": {
                "type": "string",
                "description": "Value of this scope.",
                "minLength": 1,
                "maxLength": 280
              },
              "description": {
                "type": "string",
                "description": "User-friendly description of this scope.",
                "maxLength": 500
              }
            },
            "required": ["value"],
            "additionalProperties": false
          },
          "maxItems": 1000,
          "description": "List of permissions (scopes) that this API uses."
        },
        "signing_alg": {
          "type": "string",
          "description": "Algorithm used to sign JWTs. Can be `HS256` or `RS256`.",
          "enum": ["HS256", "RS256"]
        },
        "signing_secret": {
          "type": "string",
          "minLength": 16,
          "description": "Secret used to sign tokens when using symmetric algorithms (HS256)."
        },
        "allow_offline_access": {
          "type": "boolean",
          "description": "Whether refresh tokens can be issued for this API (true) or not (false)."
        },
        "token_lifetime": {
          "type": "integer",
          "minimum": 0,
          "maximum": 2592000,
          "exclusiveMinimum": true,
          "description": "Expiration value (in seconds) for access tokens issued for this API from the token endpoint."
        },
        "token_dialect": {
          "type": "string",
          "description": "Dialect of issued access token. Can be `access_token` or `access_token_authz` (includes permissions). Values can be `access_token` or `access_token_authz` (includes permissions).",
          "enum": ["access_token", "access_token_authz"]
        },
        "skip_consent_for_verifiable_first_party_clients": {
          "type": "boolean",
          "description": "Whether to skip user consent for applications flagged as first party (true) or not (false)."
        },
        "enforce_policies": {
          "type": "boolean",
          "description": "Whether to enforce authorization policies (true) or to ignore them (false)."
        },
        "client": { "$ref": "post_resource-servers_body_client" }
      },
      "required": ["identifier"],
      "additionalProperties": false
    },
    "post_resource-servers_body_client": {
      "type": "object",
      "properties": {},
      "additionalProperties": false
    },
    "post_resource-servers_body_claims_mapping": {
      "type": "object",
      "description": "Custom configuration for claims in access tokens",
      "properties": { "sub": { "$ref": "post_resource-servers_body_sub" } },
      "additionalProperties": false
    },
    "post_resource-servers_body_sub": {
      "properties": { "source": { "enum": ["default"] } },
      "required": ["source"]
    },
    "get_resource-servers_by_id_response": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "ID of the API (resource server)."
        },
        "name": {
          "type": "string",
          "description": "Friendly name for this resource server. Can not contain `<` or `>` characters."
        },
        "is_system": {
          "type": "boolean",
          "description": "Whether this is an Auth0 system API (true) or a custom API (false)."
        },
        "identifier": {
          "type": "string",
          "description": "Unique identifier for the API used as the audience parameter on authorization calls. Can not be changed once set."
        },
        "scopes": {
          "type": "array",
          "description": "List of permissions (scopes) that this API uses.",
          "items": {
            "type": "object",
            "properties": {
              "value": {
                "type": "string",
                "description": "Value of this scope.",
                "minLength": 1,
                "maxLength": 280
              },
              "description": {
                "type": "string",
                "description": "User-friendly description of this scope.",
                "maxLength": 500
              }
            },
            "required": ["value"],
            "additionalProperties": false
          }
        },
        "signing_alg": {
          "type": "string",
          "description": "Algorithm used to sign JWTs. Can be `HS256` or `RS256`.",
          "enum": ["HS256", "RS256"]
        },
        "signing_secret": {
          "type": "string",
          "minLength": 16,
          "description": "Secret used to sign tokens when using symmetric algorithms (HS256).",
          "secret": true
        },
        "allow_offline_access": {
          "type": "boolean",
          "description": "Whether refresh tokens can be issued for this API (true) or not (false)."
        },
        "skip_consent_for_verifiable_first_party_clients": {
          "type": "boolean",
          "description": "Whether to skip user consent for applications flagged as first party (true) or not (false)."
        },
        "token_lifetime": {
          "type": "integer",
          "description": "Expiration value (in seconds) for access tokens issued for this API from the token endpoint."
        },
        "token_lifetime_for_web": {
          "type": "integer",
          "description": "Expiration value (in seconds) for access tokens issued for this API via Implicit or Hybrid Flows. Cannot be greater than the `token_lifetime` value."
        },
        "enforce_policies": {
          "type": "boolean",
          "description": "Whether authorization polices are enforced (true) or unenforced (false)."
        },
        "token_dialect": {
          "type": "string",
          "description": "Dialect of access tokens that should be issued. Can be `access_token` or `access_token_authz` (includes permissions).",
          "enum": ["access_token", "access_token_authz"]
        },
        "client": { "$ref": "get_resource-servers_by_id_response_client" }
      },
      "additionalProperties": false
    },
    "get_resource-servers_by_id_response_claims_mapping": {
      "type": "object",
      "description": "Custom configuration for claims in access tokens",
      "properties": {
        "sub": { "$ref": "get_resource-servers_by_id_response_sub" }
      },
      "additionalProperties": false
    },
    "get_resource-servers_by_id_response_sub": {
      "properties": { "source": { "enum": ["default"] } },
      "required": ["source"]
    },
    "get_resource-servers_by_id_response_client": {
      "type": "object",
      "properties": {},
      "additionalProperties": false
    },
    "patch_resource-servers_by_id_body": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "pattern": "^[^<>]+$",
          "maxLength": 200,
          "description": "Friendly name for this resource server. Can not contain `<` or `>` characters."
        },
        "scopes": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "value": {
                "type": "string",
                "description": "Value of this scope.",
                "minLength": 1,
                "maxLength": 280
              },
              "description": {
                "type": "string",
                "description": "User-friendly description of this scope.",
                "maxLength": 500
              }
            },
            "required": ["value"],
            "additionalProperties": false
          },
          "maxItems": 1000,
          "description": "List of permissions (scopes) that this API uses."
        },
        "signing_alg": {
          "type": "string",
          "description": "Algorithm used to sign JWTs. Can be `HS256` or `RS256`.",
          "enum": ["HS256", "RS256"]
        },
        "signing_secret": {
          "type": "string",
          "minLength": 16,
          "description": "Secret used to sign tokens when using symmetric algorithms (HS256)."
        },
        "skip_consent_for_verifiable_first_party_clients": {
          "type": "boolean",
          "description": "Whether to skip user consent for applications flagged as first party (true) or not (false)."
        },
        "allow_offline_access": {
          "type": "boolean",
          "description": "Whether refresh tokens can be issued for this API (true) or not (false)."
        },
        "token_lifetime": {
          "type": "integer",
          "minimum": 0,
          "maximum": 2592000,
          "exclusiveMinimum": true,
          "description": "Expiration value (in seconds) for access tokens issued for this API from the token endpoint."
        },
        "token_dialect": {
          "type": "string",
          "description": "Dialect of issued access token. Can be `access_token` or `access_token_authz` (includes permissions).",
          "enum": ["access_token", "access_token_authz"]
        },
        "enforce_policies": {
          "type": "boolean",
          "description": "Whether authorization policies are enforced (true) or not enforced (false)."
        },
        "client": { "$ref": "patch_resource-servers_by_id_body_client" }
      },
      "additionalProperties": false
    },
    "patch_resource-servers_by_id_body_client": {
      "type": "object",
      "properties": {},
      "additionalProperties": false
    },
    "patch_resource-servers_by_id_body_claims_mapping": {
      "type": "object",
      "description": "Custom configuration for claims in access tokens",
      "properties": {
        "sub": { "$ref": "patch_resource-servers_by_id_body_sub" }
      },
      "additionalProperties": false
    },
    "patch_resource-servers_by_id_body_sub": {
      "properties": { "source": { "enum": ["default"] } },
      "required": ["source"]
    }
  }
}

{
  "apiVersion": "2",
  "swaggerVersion": "1.2",
  "basePath": "/",
  "resourcePath": "/Users By Email",
  "produces": ["application/json"],
  "apis": [
    {
      "path": "/api/v2/users-by-email",
      "operations": [
        {
          "method": "get",
          "summary": "Search Users by Email",
          "notes": "If Auth0 is the identify provider (idP), the email address associated with a user is saved in lower case, regardless of how you initially provided it. For example, if you register a user as <b>JohnSmith@example.com</b>, Auth0 saves the user's email as <b>johnsmith@example.com</b>.\n\nIn cases where Auth0 is not the idP, the `email` is stored based on the rules of idP, so make sure the search is made using the correct capitalization.\n\nWhen using this endpoint, make sure that you are searching for users via email addresses using the correct case.\n",
          "type": "array",
          "nickname": "get_users-by-email",
          "parameters": [
            {
              "paramType": "query",
              "name": "fields",
              "description": "Comma-separated list of fields to include or exclude (based on value provided for include_fields) in the result. Leave empty to retrieve all fields.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "query",
              "name": "include_fields",
              "description": "Whether specified fields are to be included (true) or excluded (false). Defaults to true.",
              "type": "boolean",
              "required": false
            },
            {
              "paramType": "query",
              "name": "email",
              "description": "Email address to search for (case-sensitive).",
              "type": "string",
              "required": true
            }
          ],
          "items": { "$ref": "get_users-by-email_response" },
          "responseMessages": [
            { "code": 200, "message": "Users successfully searched." },
            {
              "code": 400,
              "message": "Invalid request URI. The message will vary depending on the cause.",
              "errorCode": "invalid_uri"
            },
            {
              "code": 400,
              "message": "Invalid request query string. The message will vary depending on the cause.",
              "errorCode": "invalid_query_string"
            },
            { "code": 401, "message": "Invalid token." },
            { "code": 401, "message": "Client is not global." },
            {
              "code": 401,
              "message": "Invalid signature received for JSON Web Token validation."
            },
            {
              "code": 403,
              "message": "User to be acted on does not match subject in bearer token.",
              "errorCode": "unowned_resource"
            },
            {
              "code": 403,
              "message": "Insufficient scope; expected any of: read:users.",
              "errorCode": "insufficient_scope"
            },
            {
              "code": 429,
              "message": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
            }
          ],
          "authorizations": { "jwt": { "scopes": ["read:users"] } }
        }
      ]
    }
  ],
  "consumes": [],
  "models": {
    "get_users-by-email_response": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "string",
          "description": "ID of the user which can be used when interacting with other APIs.",
          "defaultValue": "auth0|507f1f77bcf86cd799439020"
        },
        "email": {
          "type": "string",
          "description": "Email address of this user.",
          "format": "email",
          "defaultValue": "john.doe@gmail.com"
        },
        "email_verified": {
          "type": "boolean",
          "description": "Whether this email address is verified (true) or unverified (false).",
          "defaultValue": false
        },
        "username": {
          "type": "string",
          "description": "Username of this user.",
          "defaultValue": "johndoe"
        },
        "phone_number": {
          "type": "string",
          "description": "Phone number for this user when using SMS connections. Follows the <a href=\"https://en.wikipedia.org/wiki/E.164\">E.164 recommendation</a>.",
          "defaultValue": "+199999999999999"
        },
        "phone_verified": {
          "type": "boolean",
          "description": "Whether this phone number has been verified (true) or not (false).",
          "defaultValue": false
        },
        "created_at": {
          "type": "string",
          "description": "Date and time when this user was created (ISO_8601 format)."
        },
        "updated_at": {
          "type": "string",
          "description": "Date and time when this user was last updated/modified (ISO_8601 format)."
        },
        "identities": {
          "type": "array",
          "description": "Array of user identity objects when accounts are linked.",
          "items": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "connection": {
                "type": "string",
                "description": "Name of the connection containing this identity."
              },
              "user_id": {
                "type": "string",
                "description": "Unique identifier of the user user for this identity."
              },
              "provider": {
                "type": "string",
                "description": "The type of identity provider"
              },
              "isSocial": {
                "type": "boolean",
                "description": "Whether this identity is from a social provider (true) or not (false)."
              },
              "access_token": {
                "type": "string",
                "description": "IDP access token returned only if scope read:user_idp_tokens is defined."
              },
              "access_token_secret": {
                "type": "string",
                "description": "IDP access token secret returned only if scope read:user_idp_tokens is defined."
              },
              "refresh_token": {
                "type": "string",
                "description": "IDP refresh token returned only if scope read:user_idp_tokens is defined."
              },
              "profileData": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "Email address of this user."
                  },
                  "email_verified": {
                    "type": "boolean",
                    "description": "Whether this email address is verified (true) or unverified (false)."
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of this user."
                  },
                  "username": {
                    "type": "string",
                    "description": "Username of this user.",
                    "defaultValue": "johndoe"
                  },
                  "given_name": {
                    "type": "string",
                    "description": "Given name/first name/forename of this user."
                  },
                  "phone_number": {
                    "type": "string",
                    "description": "Phone number for this user."
                  },
                  "phone_verified": {
                    "type": "boolean",
                    "description": "Whether this phone number is verified (true) or unverified (false)."
                  },
                  "family_name": {
                    "type": "string",
                    "description": "Family name/last name/surname of this user."
                  }
                },
                "additionalProperties": true
              }
            }
          },
          "defaultValue": {
            "connection": "Initial-Connection",
            "user_id": "507f1f77bcf86cd799439020",
            "provider": "auth0",
            "isSocial": false
          }
        },
        "app_metadata": {
          "$ref": "get_users-by-email_response_app_metadata",
          "description": "User metadata to which this user has read-only access."
        },
        "user_metadata": {
          "$ref": "get_users-by-email_response_user_metadata",
          "description": "User metadata to which this user has read/write access."
        },
        "picture": {
          "type": "string",
          "description": "URL to picture, photo, or avatar of this user."
        },
        "name": { "type": "string", "description": "Name of this user." },
        "nickname": {
          "type": "string",
          "description": "Preferred nickname or alias of this user."
        },
        "multifactor": {
          "type": "array",
          "description": "List of multi-factor authentication providers with which this user has enrolled.",
          "items": { "type": "string" }
        },
        "last_ip": {
          "type": "string",
          "description": "Last IP address from which this user logged in."
        },
        "last_login": {
          "type": "string",
          "description": "Last date and time this user logged in (ISO_8601 format)."
        },
        "logins_count": {
          "type": "integer",
          "description": "Total number of logins this user has performed."
        },
        "blocked": {
          "type": "boolean",
          "description": "Whether this user was blocked by an administrator (true) or is not (false)."
        },
        "given_name": {
          "type": "string",
          "description": "Given name/first name/forename of this user."
        },
        "family_name": {
          "type": "string",
          "description": "Family name/last name/surname of this user."
        }
      },
      "additionalProperties": true
    },
    "get_users-by-email_response_app_metadata": {
      "type": "object",
      "description": "User metadata to which this user has read-only access.",
      "additionalProperties": true
    },
    "get_users-by-email_response_user_metadata": {
      "type": "object",
      "description": "User metadata to which this user has read/write access.",
      "additionalProperties": true
    }
  }
}

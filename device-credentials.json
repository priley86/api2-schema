{
  "apiVersion": "2",
  "swaggerVersion": "1.2",
  "basePath": "/",
  "resourcePath": "/Device Credentials",
  "produces": ["application/json"],
  "apis": [
    {
      "path": "/api/v2/device-credentials",
      "operations": [
        {
          "method": "get",
          "summary": "Retrieve device credentials",
          "notes": "Device Credentials relate to refresh tokens and rotating refresh tokens for a given user_id.\n\nNote: Device Credentials APIs are designed for ad-hoc administrative use only, and paging is by default enabled for GET requests.\nNote: When Refresh Token Rotation is enabled, the endpoint becomes eventual consistent.\n",
          "type": "array",
          "nickname": "get_device-credentials",
          "parameters": [
            {
              "paramType": "query",
              "name": "page",
              "description": "Page index of the results to return. First page is 0.",
              "type": "integer",
              "minimum": 0
            },
            {
              "paramType": "query",
              "name": "per_page",
              "description": "Number of results per page.  There is a maximum of 1000 results allowed from this endpoint.",
              "type": "integer",
              "minimum": 1,
              "maximum": 100
            },
            {
              "paramType": "query",
              "name": "include_totals",
              "description": "Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).",
              "type": "boolean"
            },
            {
              "paramType": "query",
              "name": "fields",
              "description": "Comma-separated list of fields to include or exclude (based on value provided for include_fields) in the result. Leave empty to retrieve all fields.",
              "type": "string"
            },
            {
              "paramType": "query",
              "name": "include_fields",
              "description": "Whether specified fields are to be included (true) or excluded (false).",
              "type": "boolean"
            },
            {
              "paramType": "query",
              "name": "user_id",
              "description": "user_id of the devices to retrieve.",
              "type": "string"
            },
            {
              "paramType": "query",
              "name": "client_id",
              "description": "client_id of the devices to retrieve.",
              "type": "string"
            },
            {
              "paramType": "query",
              "name": "type",
              "description": "Type of credentials to retrieve. Must be `public_key`, `refresh_token` or `rotating_refresh_token`. The property will default to `refresh_token` when paging is requested",
              "type": "string",
              "enum": ["public_key", "refresh_token", "rotating_refresh_token"]
            }
          ],
          "items": { "$ref": "get_device-credentials_response" },
          "responseMessages": [
            {
              "code": 200,
              "message": "Device credentials successfully retrieved."
            },
            {
              "code": 400,
              "message": "Invalid request query string. The message will vary depending on the cause.",
              "errorCode": "invalid_query_string"
            },
            { "code": 401, "message": "Invalid token." },
            { "code": 401, "message": "Client is not global." },
            {
              "code": 401,
              "message": "Invalid signature received for JSON Web Token validation."
            },
            {
              "code": 401,
              "message": "Username is malformed, try with '{connection}\\{email_or_username}'"
            },
            { "code": 401, "message": "Bad username or password." },
            {
              "code": 403,
              "message": "User to be acted on does not match subject in bearer token."
            },
            {
              "code": 403,
              "message": "Insufficient scope; expected any of: read:device_credentials,read:current_user_device_credentials.",
              "errorCode": "insufficient_scope"
            },
            {
              "code": 403,
              "message": "Cannot retrieve device credentials for that user.",
              "errorCode": "unowned_resource"
            },
            {
              "code": 403,
              "message": "Cannot retrieve device credentials for that client.",
              "errorCode": "unowned_resource"
            },
            {
              "code": 403,
              "message": "Must provide client_id parameter.",
              "errorCode": "invalid_query_string"
            },
            {
              "code": 429,
              "message": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
            }
          ],
          "authorizations": {
            "jwt": {
              "scopes": [
                "read:device_credentials",
                "read:current_user_device_credentials"
              ]
            }
          }
        },
        {
          "method": "post",
          "summary": "Create a device public key credential",
          "notes": "Device Credentials relate to refresh tokens and rotating refresh tokens for a given user_id.\n\nNote: Device Credentials APIs are designed for ad-hoc administrative use only, and paging is by default enabled for GET requests.\nNote: When Refresh Token Rotation is enabled, the endpoint becomes eventual consistent.\n",
          "type": "post_device-credentials_response",
          "nickname": "post_device-credentials",
          "parameters": [
            {
              "paramType": "body",
              "name": "body",
              "type": "post_device-credentials_body",
              "required": true
            }
          ],
          "responseMessages": [
            {
              "code": 201,
              "message": "Device credentials successfully created."
            },
            {
              "code": 400,
              "message": "Invalid request body. The message will vary depending on the cause.",
              "errorCode": "invalid_body"
            },
            { "code": 401, "message": "Invalid token." },
            {
              "code": 401,
              "message": "Invalid signature received for JSON Web Token validation."
            },
            {
              "code": 401,
              "message": "Username is malformed, try with \"{connection}\\{email_or_username}\"."
            },
            { "code": 401, "message": "Bad username or password." },
            {
              "code": 403,
              "message": "Cannot create device credentials for that user.",
              "errorCode": "unowned_resource"
            },
            {
              "code": 403,
              "message": "Cannot create device credentials for that client.",
              "errorCode": "unowned_resource"
            },
            {
              "code": 403,
              "message": "Insufficient scope; expected any of: create:current_user_device_credentials.",
              "errorCode": "insufficient_scope"
            },
            {
              "code": 409,
              "message": "A public key already exists for the device.",
              "errorCode": "device_credential_conflict"
            },
            {
              "code": 429,
              "message": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
            }
          ],
          "consumes": ["application/json", "application/x-www-form-urlencoded"],
          "authorizations": {
            "jwt": { "scopes": ["create:current_user_device_credentials"] }
          }
        }
      ]
    },
    {
      "path": "/api/v2/device-credentials/{id}",
      "operations": [
        {
          "method": "delete",
          "summary": "Delete a device credential",
          "notes": "Delete a device credential.",
          "type": "void",
          "nickname": "delete_device-credentials_by_id",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "description": "ID of the credential to delete.",
              "type": "string",
              "required": true
            }
          ],
          "responseMessages": [
            {
              "code": 204,
              "message": "Device credentials successfully deleted."
            },
            {
              "code": 400,
              "message": "Invalid request URI. The message will vary depending on the cause.",
              "errorCode": "invalid_uri"
            },
            { "code": 401, "message": "Invalid token." },
            { "code": 401, "message": "Client is not global." },
            {
              "code": 401,
              "message": "Invalid signature received for JSON Web Token validation."
            },
            {
              "code": 401,
              "message": "Username is malformed, try with \"{connection}\\{email_or_username}\"."
            },
            { "code": 401, "message": "Bad username or password." },
            {
              "code": 403,
              "message": "Insufficient scope; expected any of: delete:device_credentials, update:current_user, delete:current_user_device_credentials.",
              "errorCode": "insufficient_scope"
            },
            {
              "code": 429,
              "message": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
            }
          ],
          "authorizations": {
            "jwt": {
              "scopes": [
                "delete:device_credentials",
                "delete:current_user_device_credentials"
              ]
            }
          }
        }
      ]
    }
  ],
  "consumes": ["application/json", "application/x-www-form-urlencoded"],
  "models": {
    "get_device-credentials_response": {
      "type": "object",
      "schemaName": "deviceCredential",
      "properties": {
        "id": {
          "type": "string",
          "description": "ID of this device.",
          "defaultValue": "dcr_0000000000000001"
        },
        "device_name": {
          "type": "string",
          "description": "User agent for this device",
          "defaultValue": "iPhone Mobile Safari UI/WKWebView"
        },
        "device_id": {
          "type": "string",
          "description": "Unique identifier for the device. NOTE: This field is generally not populated for refresh_tokens and rotating_refresh_tokens",
          "defaultValue": "550e8400-e29b-41d4-a716-446655440000"
        },
        "type": {
          "type": "string",
          "enum": ["public_key", "refresh_token", "rotating_refresh_token"],
          "defaultValue": "public_key",
          "description": "Type of credential. Can be `public_key`, `refresh_token`, or `rotating_refresh_token`."
        },
        "user_id": {
          "type": "string",
          "description": "user_id this credential is associated with.",
          "defaultValue": "usr_5457edea1b8f33391a000004"
        },
        "client_id": {
          "type": "string",
          "description": "client_id of the client (application) this credential is for.",
          "defaultValue": "AaiyAPdpYdesoKnqjj8HJqRn4T5titww"
        }
      },
      "additionalProperties": false
    },
    "post_device-credentials_response": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The credential's identifier",
          "defaultValue": "dcr_0000000000000001"
        }
      },
      "required": ["id"]
    },
    "post_device-credentials_body": {
      "type": "object",
      "schemaName": "deviceCredentialCreate",
      "properties": {
        "device_name": {
          "description": "Name for this device easily recognized by owner.",
          "minLength": 1,
          "type": "string"
        },
        "type": {
          "description": "Type of credential. Must be `public_key`.",
          "enum": ["public_key"],
          "type": "string"
        },
        "value": {
          "description": "Base64 encoded string containing the credential.",
          "type": "string",
          "minLength": 1
        },
        "device_id": {
          "type": "string",
          "pattern": "^[-A-Fa-f0-9]+$",
          "maxLength": 36,
          "description": "Unique identifier for the device. Recommend using <a href=\"http://developer.android.com/reference/android/provider/Settings.Secure.html#ANDROID_ID\">Android_ID</a> on Android and <a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIDevice_Class/index.html#//apple_ref/occ/instp/UIDevice/identifierForVendor\">identifierForVendor</a>."
        },
        "client_id": {
          "type": "string",
          "format": "client-id",
          "description": "client_id of the client (application) this credential is for."
        }
      },
      "required": ["device_name", "type", "value", "device_id"]
    }
  }
}
